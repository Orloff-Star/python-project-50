def comparison_dict_plain(file_one, file_two):
    keys = file_one.keys() | file_two.keys()
    differences = []
    
    for key in keys:
        #way = f"{key}."
        if key in file_one and key in file_two:
            way = get_way_to_key(file_one, key)
            if isinstance(file_one[key], dict) and isinstance(file_two[key], dict):
                
                differences.append(comparison_dict_plain(file_one[key], file_two[key]))
                way += get_way_to_key(file_one, key)
                #way += f'{comparison_dict_plain(file_one[key], file_two[key])}'
            else:
#                if file_one[key] == file_two[key]:
#                    differences[f'    {key}'] = get_normalise_string(file_one[key])
                if file_one[key] != file_two[key]:
                    way = get_way_to_key(file_one, key)
                    differences.append(f"Property '{way}' was updated. From '{file_one[key]}' to '{file_two[key]}'")
        if key in file_one and key not in file_two:
            way = get_way_to_key(file_one, key)
            differences.append(f"Property '{way}' was removed")
        if key not in file_one and key in file_two:
            way = get_way_to_key(file_two, key)
            differences.append(f"Property '{way}' was added with value: '{file_two[key]}'")

#    differences_sort = dict(sorted(
#        differences.items(), key=lambda x: (x[0][4:])))
 #   print(differences)
    result = ''
    for item in differences:
        result += f'{item}\n'
    return result


def get_way_to_key(dict1, key, way=''):
    for keys, val in dict1.items():
        simple_path = f"{way}.{keys}" if way else keys
        if keys == key:
            return simple_path
        elif isinstance(val, dict):
            nested_path = get_way_to_key(val, key, simple_path)
            if nested_path is not None:
                return nested_path


asd = {
  "common": {
    "setting1": "Value 1",
    "setting2": 200,
    "setting3": 'true',
    "setting6": {
      "key": "value",
      "doge": {
        "wow": ""
      }
    }
  },
  "group1": {
    "baz": "bas",
    "foo": "bar",
    "nest": {
      "key": "value"
    }
  },
  "group2": {
    "abc": 12345,
    "deep": {
      "id": 45
    }
  }
}

dsa = {
  "common": {
    "follow": 'false',
    "setting1": "Value 1",
    "setting3": 'null',
    "setting4": "blah blah",
    "setting5": {
      "key5": "value5"
    },
    "setting6": {
      "key": "value",
      "ops": "vops",
      "doge": {
        "wow": "so much"
      }
    }
  },
  "group1": {
    "foo": "bar",
    "baz": "bars",
    "nest": "str"
  },
  "group3": {
    "deep": {
      "id": {
        "number": 45
      }
    },
    "fee": 100500
  }
}
print(comparison_dict_plain(asd, dsa))